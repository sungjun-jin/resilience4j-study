spring:
  application:
    name: resilence4j

resilience4j.retry:
  instances:
    simpleRetryConfig:
      baseConfig: default

  configs:
    default:
      maxAttempts: 3 # 최대 재시도 횟수
      waitDuration: 1000 # 재시도 간 대기 시간 (밀리초)
      retryExceptions:
        - me.sj.study.resilience4j.exception.RetryException # retryExceptions에 지정된 예외는 재시도 대상이 됨
      ignoreExceptions:
        - me.sj.study.resilience4j.exception.IgnoreException # ignoreExceptions에 지정된 예외는 재시도 대상에서 제외됨

resilience4j.circuitbreaker:
  configs:
    default:
      slidingWindowType: COUNT_BASED
      minimumNumberOfCalls: 7                                   # 최소 7번까지는 무조건 CLOSE로 가정하고 호출한다.
      slidingWindowSize: 10                                     # (minimumNumberOfCalls 이후로는) 10개의 요청을 기준으로 판단한다.
      waitDurationInOpenState: 10s                              # OPEN 상태에서 HALF_OPEN 상태로 전환하기까지의 시간 (시스템이 회복되기까지의 시간)

      failureRateThreshold: 40                                  # slidingWindowSize 중 몇 %가 recordException이면 OPEN으로 만들 것인가?

      slowCallDurationThreshold: 3000                           # 몇 ms 동안 요청이 처리되지 않으면 실패로 간주할 것인가?
      slowCallRateThreshold: 60                                 # slidingWindowSize 중 몇 %가 slowCall이면 OPEN으로 만들 것인가?

      permittedNumberOfCallsInHalfOpenState: 5                  # HALF_OPEN 상태에서 5번까지는 CLOSE로 가기위해 호출한다.
      automaticTransitionFromOpenToHalfOpenEnabled: true        # OPEN 상태에서 자동으로 HALF_OPEN으로 갈 것인가?

      eventConsumerBufferSize: 10                               # actuator를 위한 이벤트 버퍼 사이즈

      recordExceptions:
        - me.sj.study.resilience4j.exception.RecordException # CircuitBreaker가 실패로 간주할 예외
      ignoreExceptions:
        - me.sj.study.resilience4j.exception.IgnoreException # CircuitBreaker가 무시할 예외
  instances:
    simpleCircuitBreakerConfig:
      baseConfig: default